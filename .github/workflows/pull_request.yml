name: In pull request
on:
  pull_request:

jobs:
  check_python_linting:
    name: Ruff Linting & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: astral-sh/ruff-action@0c50076f12c38c3d0115b7b519b54a91cb9cf0ad # v3.5.0
        with:
          src: "./src ./tests"
          version-file: pyproject.toml
      - uses: astral-sh/ruff-action@0c50076f12c38c3d0115b7b519b54a91cb9cf0ad # v3.5.0
        with:
          src: "./src ./tests"
          args: "format --check"
          version-file: pyproject.toml

  test_compatibility:
    name: Test Package Compatibility
    # This job will only start after linting succeeds
    needs: check_python_linting
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.9"
            dependency-set: minimum
          - os: macos-13 # macos-latest doesn't work with python 3.10
            # https://github.com/actions/setup-python/issues/855
            python-version: "3.9"
            dependency-set: minimum
          - os: windows-latest
            python-version: "3.9"
            dependency-set: minimum
          - os: ubuntu-latest
            python-version: "3.13"
            dependency-set: maximum
          - os: macos-latest
            python-version: "3.13"
            dependency-set: maximum
          - os: windows-latest
            python-version: "3.13"
            dependency-set: maximum
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
          # Added caching to speed up subsequent runs
          cache: 'pip'

      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3
        with:
          enable-cache: true

      - name: Generate requirements file
        run: python scripts/generate_dependencies.py ${{ matrix.dependency-set }}

      - name: Install dependencies
        run: |
          uv pip install --system --no-deps .
          uv pip install --system -r requirements.txt
          uv pip install --system pytest psutil
          if [[ "${{ matrix.python-version }}" != "3.13" ]]; then
            uv pip install --system onnx
          fi
        shell: bash

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Run Tests (exclude MPS params)
        env:
          TABPFN_EXCLUDE_DEVICES: "mps"
        run: pytest tests/

  test_gpu:
    name: Test on GPU
    # This job runs only after all CPU tests in the matrix pass
    # TODO: Enable "needs" after verifying GPU runner works
    # needs: test_compatibility
    # This label must match your self-hosted or GitHub-hosted GPU runner
    runs-on: ubuntu-22.04-4core-gpu
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python 3.13
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"
          architecture: x64
          cache: 'pip'

      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3
        with:
          enable-cache: true

      - name: Generate requirements file
        run: python scripts/generate_dependencies.py maximum

      - name: Install dependencies
        run: |
          uv pip install --system --no-deps .
          uv pip install --system -r requirements.txt
          uv pip install --system pytest psutil
          if [[ "${{ matrix.python-version }}" != "3.13" ]]; then
            uv pip install --system onnx
          fi
        shell: bash

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Run GPU Test Suite
        env:
          CUDA_VISIBLE_DEVICES: "0"
        run: pytest tests/